<!DOCTYPE html>
<html lang="en">
<head>
  <style>
    
    .scanner span {
  color: transparent;
  font-size: 2rem;
  position: relative;
  overflow: hidden;
  white-space: nowrap;
}
.scanner span::before {
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 0;
  height: 100%;
  overflow: hidden;
  color: #ffffff;
  animation: load91371 5s linear infinite;
}
@keyframes load91371 {
  0% {
    width: 0;
  }

  25% {
    border-right-color: transparent;
  }

  26%, 96% {
    border-right-color: #ffffff;
    width: 100%;
  }
  100% {
    width: 100%;
    border-right-color: #ffffff;
    animation-fill-mode: both; /* Stay in the final state after animation */
    animation-delay: 4s; /* Delay the animation by 4 seconds */
    animation-iteration-count: 3; /* Run the animation only once */
  }
} 
.text-xxl {
  font-size: 13px; /* Adjust the font size as needed */
}
.Btn {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: flex-start;
  width: 150px;
  height: 40px;
  border: none;
  padding: 0px 20px;
  background-color: rgb(168, 38, 255);
  color: white;
  font-weight: 500;
  cursor: pointer;
  border-radius: 10px;
  box-shadow: 5px 5px 0px rgb(140, 32, 212);
  transition-duration: .3s;
}

.Btn .svg {
  width: 13px;
  position: absolute;
  right: 0;
  margin-right: 20px;
  fill: white;
  transition-duration: .3s;
}

.Btn:hover {
  color: transparent;
}

.Btn:hover .svg {
  right: 43%;
  margin: 0;
  padding: 0;
  border: none;
  transition-duration: .3s;
}

.Btn:active {
  transform: translate(3px, 3px);
  transition-duration: .3s;
  box-shadow: 2px 2px 0px rgb(140, 32, 212);
}

.button {
  position: relative;
  width: 150px;
  height: 40px;
  cursor: pointer;
  display: flex;
  align-items: center;
  border-radius: 10px;
  border: 1px solid #cc0000;
  background-color: #e50000;
  overflow: hidden;
}

.button__text {
  transform: translateX(35px);
  color: #fff;
  font-weight: 600;
}

.button__icon {
  position: absolute;
  transform: translateX(109px);
  height: 100%;
  width: 39px;
  background-color: #cc0000;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s;
}

.button .svg {
  width: 20px;
}

.button:hover {
  background: #cc0000;
}

.button:hover .button__text {
  color: transparent;
}

.button:hover .button__icon {
  width: 148px;
  transform: translateX(0);
}

.button:active .button__icon {
  background-color: #b20000;
}

.button:active {
  border: 1px solid #b20000;
}

</style>
<style>
.button {
  position: relative;
  width: 150px;
  height: 40px;
  cursor: pointer;
  display: flex;
  align-items: center;
  border: 1px solid red;
  background-color: red;
}

.button, .button__icon, .button__text {
  transition: all 0.3s;
}

.button .button__text {
  transform: translateX(30px);
  color: #fff;
  font-weight: 600;
}

.button .button__icon {
  position: absolute;
  transform: translateX(109px);
  height: 100%;
  width: 39px;
  background-color: red;
  display: flex;
  align-items: center;
  justify-content: center;
}

.button .svg {
  width: 30px;
  stroke: #fff;
}

.button:hover {
  background: red;
}

.button:hover .button__text {
  color: transparent;
}

.button:hover .button__icon {
  width: 148px;
  transform: translateX(0);
}

.button:active .button__icon {
  background-color: red;
}

.button:active {
  border: 1px solid red;
}



  </style>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <link rel="apple-touch-icon" sizes="76x76" href="../assets/img/apple-icon.png">
  <link rel="icon" type="image/png" href="../assets/img/favicon.png">
  <title>
The Hive Hub  </title>
  <!--     Fonts and icons     -->
  <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700" rel="stylesheet" />
  <!-- Nucleo Icons -->
  <link href="../assets/css/nucleo-icons.css" rel="stylesheet" />
  <link href="../assets/css/nucleo-svg.css" rel="stylesheet" />
  <!-- Font Awesome Icons -->
  <script src="https://kit.fontawesome.com/42d5adcbca.js" crossorigin="anonymous"></script>
  <link href="../assets/css/nucleo-svg.css" rel="stylesheet" />
  <!-- CSS Files -->
  <link id="pagestyle" href="../assets/css/argon-dashboard.css?v=2.0.4" rel="stylesheet" />
</head>

<body class="">
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg position-absolute top-0 z-index-3 w-100 shadow-none my-3 navbar-transparent mt-4">
    <div class="container">
      <a class="navbar-brand font-weight-bolder ms-lg-0 ms-3 text-white" href="/">
The Hive Hub      </a>
      <button class="navbar-toggler shadow-none ms-2" type="button" data-bs-toggle="collapse" data-bs-target="#navigation" aria-controls="navigation" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon mt-2">
          <span class="navbar-toggler-bar bar1"></span>
          <span class="navbar-toggler-bar bar2"></span>
          <span class="navbar-toggler-bar bar3"></span>
        </span>
      </button>
      <div class="collapse navbar-collapse" id="navigation">
        <ul class="navbar-nav mx-auto">
          <li class="nav-item">
            <a class="nav-link d-flex align-items-center me-2 active" aria-current="page" href="/suggestion">
              <i class="fa fa-chart-pie opacity-6  me-1"></i>
              home
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link me-2" href="/client-profile">
              <i class="fa fa-user opacity-6  me-1"></i>
              Profile
            </a>
          </li>
      
       
        </ul>
        <ul class="navbar-nav d-lg-block d-none">
            <label  class="nav-link me-2"  for="status-filter">Status:</label>
            <select class="form-control" id="status-filter" onchange="filterProjects()">
              <option value="all">All</option>
              <option value="pending">Pending</option>
              <option value="in-progress">In Progress</option>
              <option value="completed">Completed</option>
              <option value="rejected">Rejected</option>
            </select>
        </ul>
      </div>
    </div>
  </nav>
  <!-- End Navbar -->
  <main class="main-content mt-0">
    <div class="page-header align-items-start min-vh-50 pt-5 pb-11 m-3 border-radius-lg" style="background-image: url('https://raw.githubusercontent.com/creativetimofficial/public-assets/master/argon-dashboard-pro/assets/img/signup-cover.jpg'); background-position: top;">
      <span class="mask bg-gradient-dark opacity-6"></span>
      <div class="container">
        <div class="row justify-content-center">
          <div class="col-lg-5 text-center mx-auto"><br><br>
            <div class="scanner" >
              <span  id="animated-text">Your Projects  </span>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="container">
      <div class="row mt-lg-n10 mt-md-n11 mt-n10 justify-content-center">
        <div class="card mb-4">
          <!-- Add the filter dropdown -->
          <div class="card-body px-3 pt-3 pb-2">
            <div class="table-responsive p-0">
              <% if (projects.length > 0) { %>
                <table class="table align-items-center mb-0">
                  <thead>
                    <tr>
                      <th class="font-weight-bold">Project Name</th>
                      <th class="font-weight-bold">Backend</th>
                      <th class="font-weight-bold">Frontend</th>
                      <th class="font-weight-bold">Database</th>
                      <th class="font-weight-bold">Category</th>
                      <th class="font-weight-bold">Project Type</th>
                      <th class="font-weight-bold">Status</th>
                      <th class="font-weight-bold">Start Date</th>
                      <th class="font-weight-bold">End Date</th>
                      <th class="font-weight-bold">Estimated Price</th>
                      <th class="font-weight-bold">Max Budget</th>
                      <th class="font-weight-bold">Pack</th>
                      <th class="font-weight-bold">Payment Method</th>
                      <th class="font-weight-bold">Created By</th>
                    </tr>
                  </thead>
                  <tbody id="project-table-body">
                    <% projects.forEach(project => { %>
                    <tr class="project" id="project-row-<%= project.id %>">
                      <td id="project-cell-name-<%= project.id %>"><%= project.projectName %></td>
                      
                      <td class="text-uppercase text-secondary text-xxl font-weight-bolder opacity-15 other-field-cell"
                      data-project-id="<%= project.id %>" data-field-name="backend"><%= project.backend %></td>                      
                      
                      <td class="text-uppercase text-secondary text-xxl font-weight-bolder opacity-15 other-field-cell"
                      data-project-id="<%= project.id %>" data-field-name="frontend"><%= project.frontend %></td>                      
                      
                      
                      <td class="text-uppercase text-secondary text-xxl font-weight-bolder opacity-15 other-field-cell"
                        data-project-id="<%= project.id %>" data-field-name="database"><%= project.database %></td>
                    
                      <td class="text-uppercase text-secondary text-xxl font-weight-bolder opacity-15 other-field-cell"
                        data-project-id="<%= project.id %>" data-field-name="category"><%= project.category %></td>
                      <td class="text-uppercase text-secondary text-xxl font-weight-bolder opacity-15 other-field-cell"
                        data-project-id="<%= project.id %>" data-field-name="projectType"><%= project.projectType %></td>
                      <td class="text-uppercase text-secondary text-xxl font-weight-bolder opacity-15 other-field-cell"
                        data-project-id="<%= project.id %>" data-field-name="status"><%= project.status %></td>
                        <td class="text-uppercase text-secondary text-xxl font-weight-bolder opacity-15 editable-field">
                          <%= project.startDate.toLocaleDateString(undefined, {
                            weekday: 'short',
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric'
                          }) %>
                        </td>
                        <td class="text-uppercase text-secondary text-xxl font-weight-bolder opacity-15 editable-field">
                          <%= project.endDate.toLocaleDateString(undefined, {
                            weekday: 'short',
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric'
                          }) %>
                        </td>
                     
                      <td class="text-uppercase text-secondary text-xxl font-weight-bolder opacity-15 other-field-cell"
                        data-project-id="<%= project.id %>" data-field-name="estimatedPrice"><%= project.Estimated_price %></td>
                      <td class="text-uppercase text-secondary text-xxl font-weight-bolder opacity-15 other-field-cell"
                        data-project-id="<%= project.id %>" data-field-name="maxBudget"><%= project.maxBudget %></td>
                      <td class="text-uppercase text-secondary text-xxl font-weight-bolder opacity-15 other-field-cell"
                        data-project-id="<%= project.id %>" data-field-name="pack"><%= project.pack.join(', ') %></td>
                      <td class="text-uppercase text-secondary text-xxl font-weight-bolder opacity-15 other-field-cell"
                        data-project-id="<%= project.id %>" data-field-name="paymentMethod"><%= project.paymentMethod %></td>
                      <td class="text-uppercase text-secondary text-xxl font-weight-bolder opacity-15 other-field-cell"
                        data-project-id="<%= project.id %>" data-field-name="createdBy"><%= project.createdBy %></td>
                      <td>
                        <input type="text" class="form-control edit-project-name" data-project-id="<%= project.id %>"
                          style="display: none;">
                        <input type="text" class="form-control edit-project-backend" data-project-id="<%= project.id %>"
                          style="display: none;">
                        
                          
                          <button class="Btn  edit-btn"  data-project-id="<%= project.id %>">Edit 
                            <svg class="svg" viewBox="0 0 512 512">
                              <path d="M410.3 231l11.3-11.3-33.9-33.9-62.1-62.1L291.7 89.8l-11.3 11.3-22.6 22.6L58.6 322.9c-10.4 10.4-18 23.3-22.2 37.4L1 480.7c-2.5 8.4-.2 17.5 6.1 23.7s15.3 8.5 23.7 6.1l120.3-35.4c14.1-4.2 27-11.8 37.4-22.2L387.7 253.7 410.3 231zM160 399.4l-9.1 22.7c-4 3.1-8.5 5.4-13.3 6.9L59.4 452l23-78.1c1.4-4.9 3.8-9.4 6.9-13.3l22.7-9.1v32c0 8.8 7.2 16 16 16h32zM362.7 18.7L348.3 33.2 325.7 55.8 314.3 67.1l33.9 33.9 62.1 62.1 33.9 33.9 11.3-11.3 22.6-22.6 14.5-14.5c25-25 25-65.5 0-90.5L453.3 18.7c-25-25-65.5-25-90.5 0zm-47.4 168l-144 144c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6l144-144c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6z"></path></svg>
                          </button>
                          <button class="btn btn-success save-btn" data-project-id="<%= project.id %>" style="display: none;">Save</button>
                      </td> 
                       
                      
                      

                       <td>
                        
                        <button onclick="deleteProject('<%= project.id %>')" class="button" type="button">
                          <span class="button__text">Delete</span>
                          <span class="button__icon"><svg class="svg" height="512" viewBox="0 0 512 512" width="512" xmlns="http://www.w3.org/2000/svg"><title></title><path d="M112,112l20,320c.95,18.49,14.4,32,32,32H348c17.67,0,30.87-13.51,32-32l20-320" style="fill:none;stroke:#fff;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px"></path><line style="stroke:#fff;stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" x1="80" x2="432" y1="112" y2="112"></line><path d="M192,112V72h0a23.93,23.93,0,0,1,24-24h80a23.93,23.93,0,0,1,24,24h0v40" style="fill:none;stroke:#fff;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px"></path><line style="fill:none;stroke:#fff;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px" x1="256" x2="256" y1="176" y2="400"></line><line style="fill:none;stroke:#fff;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px" x1="184" x2="192" y1="176" y2="400"></line><line style="fill:none;stroke:#fff;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px" x1="328" x2="320" y1="176" y2="400"></line></svg></span>
                        </button>

                      </td> 





                        

                        
                        

                      </td>
                    </tr>
                    <% }); %>
                  </tbody>
                </table>
                
                <script>
                  document.addEventListener('DOMContentLoaded', function() {
                    attachEditEventListeners();
                  });
                
                  function deleteProject(projectId) {
  // Show confirmation prompt
  var confirmed = window.confirm("Are you sure you want to delete this project?");

  // Proceed with deletion if the user confirms
  if (confirmed) {
    // Send a DELETE request to the server
    fetch(`/api/projects/${projectId}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
      },
    })
      .then(response => response.json())
      .then(deletedProject => {
        console.log('Project deleted:', deletedProject);
        // Handle any UI updates or notifications after successful deletion
      })
      .catch(error => {
        console.error('Error deleting project:', error);
        // Handle any error notifications or fallback logic
      });
  }
}


                  function attachEditEventListeners() {
                    const editButtons = document.getElementsByClassName('edit-btn');
                    Array.from(editButtons).forEach(editButton => {
                      editButton.addEventListener('click', function() {
                        const projectId = this.getAttribute('data-project-id');
                        const projectCell = document.getElementById(`project-cell-name-${projectId}`);
                        const saveButton = document.querySelector(`.save-btn[data-project-id="${projectId}"]`);
                
                        // Enable content editing for project name
                        projectCell.contentEditable = true;
                        projectCell.focus();
                
                        // Enable content editing for other fields
                        const otherFieldCells = document.querySelectorAll(`.other-field-cell[data-project-id="${projectId}"]`);
                        otherFieldCells.forEach(cell => {
                          cell.contentEditable = true;
                        });
                
                        // Show the save button and hide the edit button
                        saveButton.style.display = 'inline-block';
                        editButton.style.display = 'none';
                      });
                    });
                
                    const saveButtons = document.getElementsByClassName('save-btn');
                    Array.from(saveButtons).forEach(saveButton => {
                      saveButton.addEventListener('click', function() {
                        const projectId = this.getAttribute('data-project-id');
                        const projectCell = document.getElementById(`project-cell-name-${projectId}`);
                        const editButton = document.querySelector(`.edit-btn[data-project-id="${projectId}"]`);
                
                        const updatedProjectName = projectCell.textContent;
                
                        // Get updated data from other fields
                        const otherFieldCells = document.querySelectorAll(`.other-field-cell[data-project-id="${projectId}"]`);
                        const updatedOtherFields = {};
                        otherFieldCells.forEach(cell => {
                          const fieldName = cell.getAttribute('data-field-name');
                          const fieldValue = cell.textContent;
                          updatedOtherFields[fieldName] = fieldValue;
                        });
                
                        // Send a PUT request to update the project data
                        fetch(`/api/projects/${projectId}`, {
                          method: 'PUT',
                          headers: {
                            'Content-Type': 'application/json',
                          },
                          body: JSON.stringify({
                            projectName: updatedProjectName,
                            ...updatedOtherFields,
                          }),
                        })
                          .then(response => {
                            if (response.ok) {
                              // Update the UI with the updated project data
                              projectCell.textContent = updatedProjectName;
                
                              // Update other field cells
                              otherFieldCells.forEach(cell => {
                                const fieldName = cell.getAttribute('data-field-name');
                                cell.textContent = updatedOtherFields[fieldName];
                              });
                
                              // Disable content editing
                              projectCell.contentEditable = false;
                              otherFieldCells.forEach(cell => {
                                cell.contentEditable = false;
                              });
                
                              // Hide the save button and show the edit button
                              saveButton.style.display = 'none';
                              editButton.style.display = 'inline-block';
                            } else {
                              console.log('Error updating project');
                            }
                          })
                          .catch(error => {
                            console.log('Error updating project:', error);
                          });
                      });
                    });
                  }
                
                  // Function for filtering projects
                  function filterProjects() {
                    const filterValue = document.getElementById('status-filter').value;
                    const projects = document.getElementsByClassName('project');
                    for (let i = 0; i < projects.length; i++) {
                      const project = projects[i];
                      const status = project.querySelector('td:nth-child(7)').innerText;
                      if (filterValue === 'all' || status === filterValue) {
                        project.style.display = 'table-row';
                      } else {
                        project.style.display = 'none';
                      }
                    }
                  }
                
                  // Set the data-text attribute to the text content
                  const animatedText = document.getElementById('animated-text');
                  animatedText.setAttribute('data-text', animatedText.textContent);
                </script>
                
              <% } else { %>
                <p>No projects found.</p>
              <% } %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
  <script src="../assets/js/core/popper.min.js"></script>
  <script src="../assets/js/core/bootstrap.min.js"></script>
  <script src="../assets/js/plugins/perfect-scrollbar.min.js"></script>
  <script src="../assets/js/plugins/smooth-scrollbar.min.js"></script>
  <script>
    var win = navigator.platform.indexOf('Win') > -1;
    if (win && document.querySelector('#sidenav-scrollbar')) {
      var options = {
        damping: '0.5'
      }
      Scrollbar.init(document.querySelector('#sidenav-scrollbar'), options);
    }
  </script>
  </script>
  <!-- Github buttons -->
  <script async defer src="https://buttons.github.io/buttons.js"></script>
  <!-- Control Center for Soft Dashboard: parallax effects, scripts for the example pages etc -->
  <script src="../assets/js/argon-dashboard.min.js?v=2.0.4"></script>
</body>
</html>
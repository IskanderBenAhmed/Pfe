<!DOCTYPE html>
<html lang="en">

<head>
 
  
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <link href="main-template/img/icon.png"  rel="icon">
  <link href="main-template/img/apple-touch-icon.png" rel="apple-touch-icon">
  <title>
    Freelancer Requests
  </title>
  <!--     Fonts and icons     -->
  <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700" rel="stylesheet" />
  <!-- Nucleo Icons -->
  <link href="../assets/css/nucleo-icons.css" rel="stylesheet" />
  <link href="../assets/css/nucleo-svg.css" rel="stylesheet" />
  <!-- Font Awesome Icons -->
  <script src="https://kit.fontawesome.com/42d5adcbca.js" crossorigin="anonymous"></script>
  <link href="../assets/css/nucleo-svg.css" rel="stylesheet" />
  <!-- CSS Files -->
  <link id="pagestyle" href="../assets/css/argon-dashboard.css?v=2.0.4" rel="stylesheet" />
  <style>
    
   .contact-freelancer-btn {
    width: 75%;}
  /* Hide the Google Translate banner */
  #goog-gt-tt {
      display: none !important;
    }
    
    /* Overlay to cover the banner */
    .overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 9999;
      background-color: white; /* Replace with your desired background color */
    }
     .bookmarkBtn {
  width: 120px;
  height: 40px; 
  border-radius: 40px;
  border: 1px solid rgba(255, 255, 255, 0.349);
  background-color:   rgb(36, 141, 228);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition-duration: .3s;
  overflow: hidden;
}

.IconContainer {
  width: 30px;
  height: 30px;
  background: linear-gradient(to bottom, rgb(237, 232, 232),rgb(255, 255, 255));
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  z-index: 2;
  transition-duration: .3s;
}

.icon {
  border-radius: 1px;
}

.text {
  height: 100%;
  width: 60px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-end;
  color: rgb(252, 250, 250);
  z-index: 1;
  transition-duration: .3s;
  font-size: 1.04em;
  font-weight: bold;
}



.bookmarkBtn:hover .IconContainer {
  width: 90px;
  border-radius: 40px;
  transition-duration: .3s;
}

.bookmarkBtn:hover .text {
  transform: translate(10px);
  width: 0;
  font-size: 0;
  transition-duration: .3s;
}

.bookmarkBtn:active {
  transform: scale(0.95);
  transition-duration: .3s;
}
    .filter-wrapper {
      position: absolute;
      top: 15px;
      right: 15px;
      padding: 10px;
      border-radius: 5px;
    }
    
    .filter-wrapper select {
      width: 200px;
    }
    .typing {
      width: 400px;
      overflow: hidden;
      white-space: nowrap;
      animation: typing 1.5s steps(12, end), cursor .2s steps(12, end) infinite;
      color: white;
    }

    @keyframes typing {
      from { width: 0; }
    }

    @keyframes cursor {
      50% { border-color: transparent; }
    }

    .small-select {
  height: 50px;
  width: 150px;
}

.form-td {
  width: 150px; /* Adjust the width value as per your requirement */
}
button {
  font-family: inherit;
  font-size: 18px;
  background: linear-gradient(to bottom, #4dc7d9 0%,#66a6ff 100%);
  color: white;
  padding: 0.8em 1.2em;
  display: flex;
  align-items: center;
  justify-content: center;
  border: none;
  border-radius: 25px;
  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.2);
  transition: all 0.3s;
}

button:hover {
  transform: translateY(-3px);
  box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.3);
}

button:active {
  transform: scale(0.95);
  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
}

button span {
  display: block;
  margin-left: 0.4em;
  transition: all 0.3s;
}

button svg {
  width: 18px;
  height: 18px;
  fill: white;
  transition: all 0.3s;
}

button .svg-wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 30px;
  height: 30px;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.2);
  margin-right: 0.5em;
  transition: all 0.3s;
}

button:hover .svg-wrapper {
  background-color: rgba(255, 255, 255, 0.5);
}

button:hover svg {
  transform: rotate(45deg);
}


.animation-fade-in {
      animation: fade-in 1s ease-in-out forwards;
      opacity: 0;
    }

    @keyframes fade-in {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }
    .custom-dropdown {
  position: relative;
  display: inline-block;
}

.custom-dropdown select {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  padding: 8px;
  border: none;
  border-radius: 4px;
  background-color: #f2f2f2;
  transition: background-color 0.3s ease;
}

.custom-dropdown:hover select {
  background-color: #e6e6e6;
}

.custom-dropdown select:focus {
  outline: none;
  background-color: #e6e6e6;
}

.dropdown-arrow {
  position: absolute;
  top: 50%;
  right: 8px;
  transform: translateY(-50%);
  width: 0;
  height: 0;
  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
  border-top: 5px solid #999999;
  transition: transform 0.3s ease;
}

.custom-dropdown:hover .dropdown-arrow {
  transform: translateY(-50%) rotate(180deg);
}

  </style>
</head>

<body class="">

  <script src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>
  <script>
    function googleTranslateElementInit() {
      new google.translate.TranslateElement(
        {
          pageLanguage: 'en'
        },
        'google_translate_element'
      );
    }
    
    function hideTranslateBanner() {
      var overlay = document.querySelector('.overlay');
      overlay.style.display = 'none';
      
      // Check if banner reappears and hide it again after a delay
      setTimeout(hideTranslateBanner, 1000);
    }

    window.onload = function() {
      googleTranslateElementInit();
      hideTranslateBanner();
    };
  </script>
  
  <!-- Navbar -->

  <nav class="navbar navbar-expand-lg position-absolute top-0 z-index-3 w-100 shadow-none my-3 navbar-transparent mt-4">
    <div class="container">
      <a class="navbar-brand font-weight-bolder ms-lg-0 ms-3 text-white" href="/">
        The Hive Hub
      </a>
      <button class="navbar-toggler shadow-none ms-2" type="button" data-bs-toggle="collapse" data-bs-target="#navigation" aria-controls="navigation" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon mt-2">
          <span class="navbar-toggler-bar bar1"></span>
          <span class="navbar-toggler-bar bar2"></span>
          <span class="navbar-toggler-bar bar3"></span>
        </span>
      </button>
      <div class="collapse navbar-collapse" id="navigation">
        <ul class="navbar-nav mx-auto">
          <li class="nav-item">
            <a class="nav-link d-flex align-items-center me-2 active" aria-current="page" href="/admin">
              <i class="fa fa-chart-pie opacity-6  me-1"></i>
              Home
            </a>
          </li>
        
          <li class="nav-item">
            <a class="nav-link me-2" href="/register">
              <i class="fas fa-user-circle opacity-6  me-1"></i>
              Sign Up
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link me-2" href="/login">
              <i class="fas fa-key opacity-6  me-1"></i>
              Sign In
            </a>
          </li>



        </ul>

    
        <div class="filter-wrapper">
          <div id="google_translate_element"></div>

          <div class="row align-items-center">
            <div class="col">
              <h5 class="text-white mb-5 mt-5">Filter</h5>
            </div>
            <div class="col">
              <select class="form-control bg-white" id="filter" onchange="applyFilter(this.value)">
                <option value="all">All</option>
                <option value="pending">Pending</option>
                <option value="approved">Approved</option>
                <option value="rejected">Rejected</option>
              </select>
              
            </div>
          </div>
        </div>
      </div>
    </div>
  </nav>
  <!-- End Navbar -->
  <main class="main-content  mt-0">
    <div class="page-header align-items-start min-vh-50 pt-5 pb-11 m-3 border-radius-lg" style="background-image: url('https://raw.githubusercontent.com/creativetimofficial/public-assets/master/argon-dashboard-pro/assets/img/signup-cover.jpg'); background-position: top;">
      <span class="mask bg-gradient-dark opacity-6"></span>
      <div class="container">
        <div class="row justify-content-center">
          <div class="col-lg-5 text-center mx-auto"><br><br><br>  
            <h2 style="color: #ffffff;" class="bigger-label animation-fade-in" style="margin-left: 50px;">List of propositions</h2>

          </div>
        </div>
      </div>
    </div>
    
    <div class="container">
      <div class="row mt-lg-n10 mt-md-n11 mt-n10 justify-content-center">
        <div class="card mb-4">
         
          <div class="card-body px-3 pt-3 pb-2">
            <div class="table-responsive p-0">
              <% if (propositions.length > 0) { %>
                <table class="table align-items-center mb-0">
                  <thead>
                    <tr>
                      <th>projectName</th>
                      <th>Freelancer </th>
                      <th>budget proposed</th>  
                      <th>selected</th>  

                      <th>Status</th>

                    </tr>
                  </thead>
                  <tbody>
                    <% propositions.forEach(proposition => { %>
                      <tr data-status="<%= proposition.status %>">
                        <td class="form-td"><%= proposition.projectName %></td>
                        <td class="form-td"><%= proposition.freelancerUsername %></td>
                        <td class="form-td"><%= proposition.price %></td>
                        <td class="form-td"><%= proposition.selected %></td>


                        <td class="form-td">
                          <form id="proposition-form-<%= proposition._id %>" action="/propositions/<%= proposition._id %>/status" method="POST">
                            <div style="display: flex; align-items: center;">
                              <div class="custom-dropdown">
                                <select class="form-control small-select status-dropdown" data-proposition-id="<%= proposition._id %>">
                                  <option value="pending" <% if (proposition.status === 'pending') { %>selected<% } %>>Pending</option>
                                  <option value="approved" <% if (proposition.status === 'approved') { %>selected<% } %>>Approved</option>
                                  <option value="rejected" <% if (proposition.status === 'rejected') { %>selected<% } %>>Rejected</option>
                                </select>
                                <span class="dropdown-arrow"></span>
                              </div>
                               
                            </div>
                          </form>
                        </td>
                        <td class="form-td">
                          <% if (proposition.status === 'approved' && proposition.selected === true) { %>
                            <button class="contact-freelancer-btn" data-freelancer-email="<%= proposition.freelancerEmail %>">
                              <div class="svg-wrapper">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16">
                                  <path fill="none" d="M0 0h24v24H0z"></path>
                                  <path fill="currentColor" d="M1.946 9.315c-.522-.174-.527-.455.01-.634l19.087-6.362c.529-.176.832.12.684.638l-5.454 19.086c-.15.529-.455.547-.679.045L12 14l6-8-8 6-8.054-2.685z"></path>
                                </svg>
                              </div>
                              <span>Contact</span>
                            </button>
                          <% } %>
                        </td>
                        
                        
                        
                      </tr>
                    <% }); %>
                  </tbody>
                </table>
              <% } else { %>
                <p>No projects found.</p>
              <% } %>
            </div>
          </div>
        </div>

        <div class="modal fade" id="contactModal" tabindex="-1" aria-labelledby="contactModalLabel" aria-hidden="true">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="contactModalLabel">Contact Freelancer</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                <form id="contactForm">
                  <div class="mb-3">
                    <label for="recipientEmail" class="form-label">Recipient Email</label>
                    <input type="email" class="form-control" id="recipientEmail" >
                  </div>
                  <div class="mb-3">
                    <label for="message" class="form-label">Message</label>
                    <textarea class="form-control" id="message" rows="4" required></textarea>
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Send Message</button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>


      </div>
    </div>
  </main>
  
  <!-- -------- START FOOTER 3 w/ COMPANY DESCRIPTION WITH LINKS & SOCIAL ICONS & COPYRIGHT ------- -->
  <!-- -------- END FOOTER 3 w/ COMPANY DESCRIPTION WITH LINKS & SOCIAL ICONS & COPYRIGHT ------- -->
  <!--   Core JS Files   -->
  <script src="../assets/js/core/popper.min.js"></script>
  <script src="../assets/js/core/bootstrap.min.js"></script>
  <script src="../assets/js/plugins/perfect-scrollbar.min.js"></script>
  <script src="../assets/js/plugins/smooth-scrollbar.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.18/dist/sweetalert2.all.min.js"></script>

  <script>
     // Function to filter propositions based on the selected status
  function applyFilter(selectedStatus) {
    const rows = document.querySelectorAll('tr[data-status]');
    rows.forEach(row => {
      const status = row.getAttribute('data-status');
      if (selectedStatus === 'all' || status === selectedStatus) {
        row.style.display = 'table-row';
      } else {
        row.style.display = 'none';
      }
    });
  }

  // Add event listener to status dropdowns
  const statusDropdowns = document.querySelectorAll('.status-dropdown');
  statusDropdowns.forEach(dropdown => {
    dropdown.addEventListener('change', function(event) {
      event.preventDefault(); // Prevent the default form submission

      const propositionId = this.getAttribute('data-proposition-id');
      const selectedStatus = this.value;

      // If the selected status is "Rejected," show the SweetAlert2 popup
      if (selectedStatus === 'rejected') {
        Swal.fire({
          icon: 'warning',
          title: 'Rejection Reason',
          text: 'Please enter the reason for rejection:',
          input: 'text',
          inputAttributes: {
            required: true,
          },
          showCancelButton: true,
          confirmButtonText: 'Save',
        }).then((result) => {
          if (result.isConfirmed) {
            const rejectionReason = result.value;
            // Send AJAX request to update status and rejection reason
            const xhr = new XMLHttpRequest();
            xhr.open('POST', `/propositions/${propositionId}/status`, true);
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.onreadystatechange = function() {
              if (xhr.readyState === 4 && xhr.status === 200) {
                // Status and rejection reason updated successfully
                console.log('Status and rejection reason updated');
                // Reload the page to reflect the changes
                location.reload();
              }
            };
            xhr.send(JSON.stringify({ status: selectedStatus, rejection_reason: rejectionReason }));
          }
        });
      } else {
        // If status is not "Rejected," update status only without rejection reason
        // Send AJAX request to update status
        const xhr = new XMLHttpRequest();
        xhr.open('POST', `/propositions/${propositionId}/status`, true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.onreadystatechange = function() {
          if (xhr.readyState === 4 && xhr.status === 200) {
            // Status updated successfully
            console.log('Status updated');
          }
        };
        xhr.send(JSON.stringify({ status: selectedStatus }));

        // Show the success alert
        Swal.fire({
          icon: 'success',
          title: 'Status Updated!',
          text: 'The project status has been successfully updated to Approved.',
          timer: 3000, // Auto close after 3 seconds
          timerProgressBar: true,
          showConfirmButton: false
        }).then(() => {
          // Reload the page to reflect the changes
          location.reload();
        });
      }
    });
  });

const contactButtons = document.querySelectorAll('.contact-freelancer-btn');
const contactModal = new bootstrap.Modal(document.getElementById('contactModal'));
const recipientEmailInput = document.getElementById('recipientEmail');
const contactForm = document.getElementById('contactForm');

contactButtons.forEach(button => {
  button.addEventListener('click', function(event) {
    event.preventDefault();
    const freelancerEmail = this.getAttribute('data-freelancer-email');
    const freelancerUsername = this.closest('tr').querySelector('.form-td:nth-child(2)').textContent; // Get the freelancerUsername from the second column in the row
    recipientEmailInput.value = freelancerEmail;
    // Set the value of a hidden input field in the contact form to hold the freelancerUsername
    const usernameInput = document.createElement('input');
    usernameInput.type = 'hidden';
    usernameInput.name = 'freelancerUsername';
    usernameInput.value = freelancerUsername;
    contactForm.appendChild(usernameInput);
    contactModal.show();
  });
});

// Add event listener to the contact form submission
contactForm.addEventListener('submit', function(event) {
  event.preventDefault();
  // Implement your logic here to send the message to the freelancer's email
  const recipientEmail = recipientEmailInput.value;
  const freelancerUsername = document.querySelector('input[name="freelancerUsername"]').value; // Get the freelancerUsername from the hidden input field
  const message = document.getElementById('message').value;

  // Send AJAX request to save the data in the database
  fetch('/send-contact', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      recipientEmail,
      message,
      freelancerUsername, // Pass the freelancerUsername to the server
    }),
  })
  .then(response => response.json())
  .then(data => {
    // Data successfully saved in the database
    console.log('Contact details saved:', data);
    // Clear the form and close the modal
    contactForm.reset();
    contactModal.hide();
    // Show a success message or take any other action if needed
    // For example, you can show a success alert using SweetAlert2
    Swal.fire({
      icon: 'success',
      title: 'Message sent',
      text: 'Your message has been sent to the freelancer.',
    });
  })
  .catch(error => {
    // Error occurred while saving the data
    console.error('Error saving contact details:', error);
    // Show an error message or take any other action if needed
    // For example, you can show an error alert using SweetAlert2
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'An error occurred while sending the message.',
    });
  });
});

  </script>
  
  <!-- Github buttons -->
  <script async defer src="https://buttons.github.io/buttons.js"></script>
  <!-- Control Center for Soft Dashboard: parallax effects, scripts for the example pages etc -->
  <script src="../assets/js/argon-dashboard.min.js?v=2.0.4"></script>
</body>

</html>
